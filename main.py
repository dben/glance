import mintapi
import os
import datetime
from dotenv import load_dotenv
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db

load_dotenv()

cred = credentials.Certificate(os.getenv('FIREBASE_CREDENTIALS'))
firebase_admin.initialize_app(cred, {
    'databaseURL': os.getenv('FIREBASE_DB')
})
data = db.reference('budget')
keys = os.getenv('MINT_KEYS').split(',')

mint = mintapi.Mint(
    os.getenv('MINT_USERNAME'),
    os.getenv('MINT_PASSWORD'),
    # Optional parameters
    mfa_method='soft-token',
    mfa_token=os.getenv('MINT_MFA_TOKEN'),  # Code generated by authenticator app
    intuit_account=None,  # account name when multiple accounts are registered with this email.
    headless=True,  # Whether the chromedriver should work without opening a
    wait_for_sync=False,  # do not wait for accounts to sync
    wait_for_sync_timeout=300,  # number of seconds to wait for sync
    fail_if_stale=True,  # True will raise an exception if Mint is unable to refresh your data.
    use_chromedriver_on_path=True,  # True will use a system provided chromedriver binary that
    # is on the PATH (instead of downloading the latest version)
    driver=None,  # pre-configured driver. If None, Mint will initialize the WebDriver.
    quit_driver_on_fail=True  # Quit from the browser and driver if an unexpected exception caught.
    # Could be useful to set it to False if the ownership of the driver should not be owned by Mint object.
)

# Get transactions for a specific account
accounts = mint.get_account_data()  # array of accounts
accountIds = []
startOfMonth = datetime.date.today().replace(day=1)
total = 0

for account in accounts:
    for key in keys:
        if account['fiName'] == key and account['isActive']:
            total += account['currentBalance'] - account['statementDueAmount']
            accountIds.append(account['id'])

trans = mint.get_transaction_data(
    account_ids=accountIds,
    remove_pending=False,
    start_date=startOfMonth
)
mint.close()

pending = 0
print("Total: $", round(total, 2))
data.child('total').set(round(total, 2))

print("Pending Transactions")
data.child('pending').delete()
for transaction in trans:
    if transaction['isPending']:
        pending += (-1 * transaction['amount'])
        print(transaction['date'], -1 * transaction['amount'], transaction['description'])
        data.child('pending').push({
            'date': transaction['date'],
            'amount': -1 * transaction['amount'],
            'description': transaction['description']
        })
print("Pending Total: $", round(pending, 2))
data.child('pending-total').set(round(pending, 2))